<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{ecd236f1-0845-4f99-85e2-7b5856c6ee40}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR		
	State			: INT			:= 255;
	
	Controlmode		: E_Controlmode;
	
	Current_State	: E_Statemachine_State;
	Target_State	: E_Statemachine_State;
		
	bTaster1 AT%I*	: BOOL;
	bTaster2 AT%I*	: BOOL;
	bTaster3 AT%I*	: BOOL;
	bTaster4 AT%I*	: BOOL;
	bTaster5 AT%I*	: BOOL;
	bTaster6 AT%I*	: BOOL;
	bTaster7 AT%I*	: BOOL;
	bTaster8 AT%I*	: BOOL;
	bTaster1_Flanke	: R_TRIG;
	bTaster2_Flanke	: R_TRIG;
	bTaster3_Flanke	: R_TRIG;
	bTaster4_Flanke	: R_TRIG;
	bTaster5_Flanke	: R_TRIG;
	bTaster6_Flanke	: R_TRIG;
	bTaster7_Flanke	: R_TRIG;
	bTaster8_Flanke	: R_TRIG;
	
	
	bLED1 	AT%Q* 	: BOOL;
	bLED2 	AT%Q* 	: BOOL;
	bLED3 	AT%Q* 	: BOOL;
	bLED4 	AT%Q* 	: BOOL;
	bLED5 	AT%Q* 	: BOOL;
	bLED6 	AT%Q* 	: BOOL;
	bLED7 	AT%Q* 	: BOOL;
	bLED8 	AT%Q* 	: BOOL;
	
	CAN_Object_Testing		: FB_DS402_Object_Testing;
			
	Profile_Position_Mode	: Profile_Position_Mode;
	
	READ_Manufacturer_label	: READ_Manufacturer_label;
	
	Encoder_Alignment		: Encoder_Alignment;
	
	Homing_parameters		: ST_Homing_parameters;
	Homing_mode				: Homing_Mode;
	
	NodeID			: BYTE := 2;
	
	Data		: ARRAY [0..255] OF BYTE;
	
	SDO_READ		: FB_SDO_READ;
	ReadStart		: BOOL;
	ReadError		: DWORD;
	ReadData		: ARRAY [0..255] OF BYTE;
	
	SDO_WRITE		: FB_SDO_WRITE;
	WriteData		: ARRAY [0..255] OF BYTE;
	WriteStart		: BOOL;
	WriteError		: DWORD;

	Start_Testing	: FB_Sequenz_Testing;
	
	Position_set	: BOOL;
	
	Position_1		: DINT 	:= 0;
	Position_2		: DINT	:= 16#10000;

	Start_Merker	: BOOL;
	Finished		: BOOL;
	i				: DINT;
	
	STOP			: BOOL;
	
	Quick_Stop		: BOOL := FALSE;
	
	New_Controlword	: WORD;
		
	Fehler: DWORD;
	
	Startsequence 	: ARRAY [0..12] OF E_Test_step 	:= [E_Test_step.Switch_on_disabled,															
														E_Test_step.Velocity_window_30rpm,
														E_Test_step.Velocity_window_100ms,	
														E_Test_step.Mode_PVM,
														E_Test_step.Acceleration_1000,
														E_Test_step.Deceleration_1000,
														E_Test_step.PVM_Velocity_1000,
														E_Test_step.Ready_to_switch_on,
														E_Test_step.Switched_on,
														E_Test_step.Operation_enabled,
														E_Test_step.Wait_1000ms, 
														E_Test_step.Check_Statusword_Target_reached_200ms, 
														E_Test_step.Switch_on_disabled];
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Determine state
Current_State := GET_STATE(PDO.Statusword);

// Show State with LEDs on IO module
bLED1 := (Current_State = E_Statemachine_State.Not_ready_to_switch_on);
bLED2 := (Current_State = E_Statemachine_State.Switch_on_disabled);
bLED3 := (Current_State = E_Statemachine_State.Ready_to_switch_on);
bLED4 := (Current_State = E_Statemachine_State.Switched_on);
bLED5 := (Current_State = E_Statemachine_State.Operation_enabled);
bLED6 := (Current_State = E_Statemachine_State.Quick_stop_active);
bLED7 := (Current_State = E_Statemachine_State.Fault_reaction_active);
bLED8 := (Current_State = E_Statemachine_State.Fault);

// Stop condition is all taster off
STOP := NOT bTaster1 AND NOT bTaster2 AND NOT bTaster3 AND NOT bTaster4 AND NOT bTaster5 AND NOT bTaster6 AND NOT bTaster7 AND NOT bTaster8;

// Reset if all taster are high
IF bTaster1 AND bTaster2 AND bTaster3 AND bTaster4 AND bTaster5 AND bTaster6 AND bTaster7 AND bTaster8 THEN
	State := 0;
END_IF

// Detect rising egdes
bTaster1_Flanke(CLK := bTaster1);
bTaster2_Flanke(CLK := bTaster2);
bTaster3_Flanke(CLK := bTaster3);
bTaster4_Flanke(CLK := bTaster4);
bTaster5_Flanke(CLK := bTaster5);	
bTaster6_Flanke(CLK := bTaster6);
bTaster7_Flanke(CLK := bTaster7);
bTaster8_Flanke(CLK := bTaster8);


New_Controlword := PDO.Controlword;


// Logger
GLB.Logger();
	


CASE State OF	
	// ********** Initial steps **********	
	0: // Idle
		CASE Controlmode OF
			E_controlmode.IO_Testmode:
				// In this mode the function are startet by digital inputs.		
				Target_State 			:= E_statemachine_state.Switch_on_disabled;
				PDO.Mode_of_operation 	:= E_Mode_of_operation.No_mode_active;
			
				IF NOT Stop THEN
					IF 		bTaster1_Flanke.Q 	THEN	
						// ************** Object test **************	
						State := 10;							
					
					ELSIF 	bTaster2_Flanke.Q 	THEN	
						// ********* Test the Start Testing ********
						State := 40;


					//ELSIF 	bTaster2_Flanke.Q 	THEN							
						// ********** Velocity Mode **********	
						//PDO.Mode_of_operation 	:= E_Mode_of_operation.Velocity_mode;
						//Target_State 			:= E_statemachine_state.Operation_enabled;
						//PDO.vl_target_velocity 	:= 1000;
						//State := 1;
						
					ELSIF 	bTaster3_Flanke.Q 	THEN
						// ********** Profile Velocity Mode **********			
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Profile_velocity_mode;
						Target_State 			:= E_statemachine_state.Operation_enabled;
						PDO.Target_velocity 	:= 100000;			
						State := 1;
			
					ELSIF 	bTaster4_Flanke.Q 	THEN
						// ********** Profile Position Mode **********	
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Profile_position_mode;
						Target_State 			:= E_statemachine_state.Operation_enabled;
						PDO.Profile_velocity 	:= 1000000;						
						PDO.Target_position 	:= Position_1;	
						Start_Merker 			:= TRUE;
						State := 1;
						
					ELSIF 	bTaster5_Flanke.Q 	THEN
						// ********** Profile Position Mode **********	
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Profile_position_mode;
						Target_State 			:= E_statemachine_state.Operation_enabled;
						PDO.Profile_velocity 	:= 100000;
						PDO.Target_position 	:= Position_2;	
						Start_Merker 			:= TRUE;
						State := 1;
						
					//ELSIF 	bTaster6_Flanke.Q 	THEN  
						// ************* Homing mode **************		
					//	Homing_parameters.Homing_mode := E_Homing_mode.Homing_on_current_position;			
					//	State := 20;				
						
					ELSIF 	bTaster6_Flanke.Q 	THEN	
						// Open / Close Logger File				
						IF GLB.Logger.IsOpen THEN 
							GLB.Logger(CloseFlag := TRUE);
						ELSE
							GLB.Logger(OpenFlag := TRUE);				
						END_IF								
					
					ELSIF 	bTaster7_Flanke.Q	THEN
						// Test: Write Logger Message						
						GLB.Logger(Message:= 'Hallo');	

					ELSIF 	bTaster8_Flanke.Q	THEN
						// Test: Save Logger Message						
						GLB.Logger(SaveFlag := TRUE);
						
					END_IF			
				END_IF					
				New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);	
						
				
			E_Controlmode.Manual:
				// The user have to set the pdo values or the target state manually.
				State := 255;
			
		END_CASE
		
		
	1: // Start process
		IF 	STOP THEN	
			Target_State := E_statemachine_state.Switch_on_disabled;
			State := 3;	
		ELSIF Current_State = E_statemachine_state.Operation_enabled THEN 	
			State := 2;			
		END_IF;		
	
		New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);	
				
		
	2: // Mode specific
		New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);
	
		CASE PDO.Mode_of_operation OF				
			E_Mode_of_operation.Profile_position_mode:
				Profile_Position_Mode(Current_State:=Current_State, Statusword:=PDO.Statusword, Controlword:=New_Controlword, Start:=Start_Merker, Finished=>Finished);
				
				
		END_CASE
				
		IF STOP THEN 
			Target_State := E_statemachine_state.Switch_on_disabled;
			New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);	
			State := 3; 
		END_IF
					
		
	3:	// Stop process
		Target_State := E_statemachine_state.Switch_on_disabled;	
		New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);			
		IF Current_State = E_statemachine_state.Switch_on_disabled THEN	State := 0;	END_IF
		
		
	10:	// ********** CAN Object Testing **********	
		CAN_Object_Testing(Start := TRUE);	
		State := State + 1;

	11: // Wait for finish
		CAN_Object_Testing(Start := FALSE);		
		IF CAN_Object_Testing.Finished AND STOP THEN	
			State := 0;	
		END_IF
			
		
	20:	// ************* Homing mode **************
		Homing_mode(NodeID:=NodeID, Start:=TRUE, Current_State:=Current_State, Statusword:=PDO.Statusword, Homing_parameters:=Homing_parameters, Controlword=>New_Controlword, Mode_of_operation=>PDO.Mode_of_operation);
		State := State + 1;
	
	21: // Wait for finish
		Homing_mode(Start:=FALSE, Current_State:=Current_State, Statusword:=PDO.Statusword, Controlword=>New_Controlword);	
		IF Homing_mode.Finished THEN
			State := 0;
		END_IF
		
		
	30:	// ********** Encoder Alignment ***********	
		Encoder_Alignment(Start:=TRUE, Current_State:=Current_State, Statusword:=PDO.Statusword, Controlword=>New_Controlword);
		State := State + 1;
	
	31: // Wait for finish
		Encoder_Alignment(Start:=FALSE, Current_State:=Current_State, Statusword:=PDO.Statusword, Controlword=>New_Controlword);	
		IF Encoder_Alignment.Finished THEN
			State := 0;
		END_IF

		
	40:	// Test the Start Testing		
		Start_Testing(Start:=TRUE, Sequence_Name:='Test Sequence', Step_list:=Startsequence);
		State := State + 1;
	
	41: // Wait for finish
		Start_Testing(Start:=FALSE);
		New_Controlword := PDO.Controlword;		
		IF Start_Testing.Finished THEN
			State := 0;
		END_IF

		
	255: // **************** Init *****************
		GLB.Logger(OpenFlag:=TRUE);
		State := 0;
	
		
	ELSE	// Reset to Idle
		State := 0;
	
END_CASE	


// Write the new Controlword
PDO.Controlword := New_Controlword;]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1795" Count="14" />
      <LineId Id="2193" Count="1" />
      <LineId Id="1811" Count="0" />
      <LineId Id="2195" Count="1" />
      <LineId Id="1812" Count="10" />
      <LineId Id="1954" Count="1" />
      <LineId Id="2933" Count="0" />
      <LineId Id="2930" Count="2" />
      <LineId Id="3030" Count="0" />
      <LineId Id="3033" Count="0" />
      <LineId Id="3032" Count="0" />
      <LineId Id="1824" Count="3" />
      <LineId Id="1829" Count="0" />
      <LineId Id="2360" Count="0" />
      <LineId Id="1830" Count="2" />
      <LineId Id="2265" Count="0" />
      <LineId Id="1833" Count="1" />
      <LineId Id="3035" Count="0" />
      <LineId Id="1839" Count="0" />
      <LineId Id="3241" Count="2" />
      <LineId Id="3121" Count="0" />
      <LineId Id="3123" Count="0" />
      <LineId Id="3122" Count="0" />
      <LineId Id="3120" Count="0" />
      <LineId Id="1842" Count="29" />
      <LineId Id="1876" Count="0" />
      <LineId Id="2124" Count="0" />
      <LineId Id="2275" Count="0" />
      <LineId Id="2043" Count="0" />
      <LineId Id="2042" Count="0" />
      <LineId Id="1878" Count="0" />
      <LineId Id="2040" Count="0" />
      <LineId Id="2923" Count="3" />
      <LineId Id="2039" Count="0" />
      <LineId Id="2038" Count="0" />
      <LineId Id="1880" Count="1" />
      <LineId Id="1886" Count="0" />
      <LineId Id="3021" Count="2" />
      <LineId Id="3020" Count="0" />
      <LineId Id="2938" Count="0" />
      <LineId Id="1888" Count="2" />
      <LineId Id="2358" Count="1" />
      <LineId Id="2354" Count="3" />
      <LineId Id="1891" Count="20" />
      <LineId Id="1915" Count="16" />
      <LineId Id="2886" Count="0" />
      <LineId Id="2888" Count="0" />
      <LineId Id="2890" Count="0" />
      <LineId Id="2889" Count="0" />
      <LineId Id="2598" Count="0" />
      <LineId Id="2597" Count="0" />
      <LineId Id="2884" Count="1" />
      <LineId Id="1934" Count="1" />
      <LineId Id="2024" Count="0" />
      <LineId Id="1936" Count="0" />
      <LineId Id="2026" Count="0" />
      <LineId Id="2025" Count="0" />
      <LineId Id="2037" Count="0" />
      <LineId Id="2033" Count="0" />
      <LineId Id="2031" Count="0" />
      <LineId Id="2034" Count="1" />
      <LineId Id="2123" Count="0" />
      <LineId Id="2036" Count="0" />
      <LineId Id="2111" Count="8" />
      <LineId Id="3114" Count="0" />
      <LineId Id="2443" Count="0" />
      <LineId Id="3115" Count="0" />
      <LineId Id="3125" Count="4" />
      <LineId Id="3251" Count="0" />
      <LineId Id="3130" Count="1" />
      <LineId Id="3116" Count="0" />
      <LineId Id="2437" Count="0" />
      <LineId Id="3222" Count="0" />
      <LineId Id="1938" Count="0" />
      <LineId Id="1945" Count="2" />
      <LineId Id="3034" Count="0" />
      <LineId Id="1948" Count="3" />
      <LineId Id="1959" Count="0" />
      <LineId Id="1958" Count="0" />
      <LineId Id="1957" Count="0" />
      <LineId Id="293" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>