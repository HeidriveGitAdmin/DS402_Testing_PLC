<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="MAIN" Id="{ecd236f1-0845-4f99-85e2-7b5856c6ee40}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR		
	Index 			: BYTE := 0;
		
	Controlmode		: E_Controlmode;
	
	Current_State	: E_Statemachine_State;
	Target_State	: E_Statemachine_State;
		
	bTaster1 AT%I*	: BOOL;
	bTaster2 AT%I*	: BOOL;
	bTaster3 AT%I*	: BOOL;
	bTaster4 AT%I*	: BOOL;
	bTaster5 AT%I*	: BOOL;
	bTaster6 AT%I*	: BOOL;
	bTaster7 AT%I*	: BOOL;
	bTaster8 AT%I*	: BOOL;
	bTaster1_Flanke	: R_TRIG;
	bTaster2_Flanke	: R_TRIG;
	bTaster3_Flanke	: R_TRIG;
	bTaster4_Flanke	: R_TRIG;
	bTaster5_Flanke	: R_TRIG;
	bTaster6_Flanke	: R_TRIG;
	bTaster7_Flanke	: R_TRIG;
	bTaster8_Flanke	: R_TRIG;
	
	
	bLED1 	AT%Q* 	: BOOL;
	bLED2 	AT%Q* 	: BOOL;
	bLED3 	AT%Q* 	: BOOL;
	bLED4 	AT%Q* 	: BOOL;
	bLED5 	AT%Q* 	: BOOL;
	bLED6 	AT%Q* 	: BOOL;
	bLED7 	AT%Q* 	: BOOL;
	bLED8 	AT%Q* 	: BOOL;
	
	CAN_Object_Testing		: CAN_Object_Testing;
	CAN_Object_Tests 		: ARRAY [0..2] OF ST_CAN_Object_Test;
			
	Profile_Position_Mode	: Profile_Position_Mode;
	
	READ_Manufacturer_label	: READ_Manufacturer_label;
	
	Encoder_Alignment		: Encoder_Alignment;
	
	Homing_parameters		: ST_Homing_parameters;
	Homing_mode				: Homing_Mode;
	
	NodeID			: BYTE := 2;
	
	SDO_READ		: FB_SDO_READ;
	ReadStart		: BOOL;
	ReadError		: DWORD;
	ReadData		: ARRAY [0..255] OF BYTE;
	
	SDO_WRITE		: FB_SDO_WRITE;
	WriteData		: ARRAY [0..255] OF BYTE;
	WriteStart		: BOOL;
	WriteError		: DWORD;

	Position_set	: BOOL;
	
	Position_1		: DINT 	:= 0;
	Position_2		: DINT	:= 16#10000;

	Start_Merker	: BOOL;
	Finished		: BOOL;
	i				: DINT;
	
	STOP			: BOOL;
	
	Quick_Stop		: BOOL := FALSE;
	
	New_Controlword	: WORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Determine state
GET_STATE(PDO.Statusword, State => Current_State);

// Show State with LEDs on IO module
bLED1 := (Current_State = E_Statemachine_State.Not_ready_to_switch_on);
bLED2 := (Current_State = E_Statemachine_State.Switch_on_disabled);
bLED3 := (Current_State = E_Statemachine_State.Ready_to_switch_on);
bLED4 := (Current_State = E_Statemachine_State.Switched_on);
bLED5 := (Current_State = E_Statemachine_State.Operation_enabled);
bLED6 := (Current_State = E_Statemachine_State.Quick_stop_active);
bLED7 := (Current_State = E_Statemachine_State.Fault_reaction_active);
bLED8 := (Current_State = E_Statemachine_State.Fault);

// Stop condition is all taster off
STOP := NOT bTaster1 AND NOT bTaster2 AND NOT bTaster3 AND NOT bTaster4 AND NOT bTaster5 AND NOT bTaster6 AND NOT bTaster7 AND NOT bTaster8;

// Reset if all taster are high
IF bTaster1 AND bTaster2 AND bTaster3 AND bTaster4 AND bTaster5 AND bTaster6 AND bTaster7 AND bTaster8 THEN
	Index := 0;
END_IF

// Detect rising egdes
bTaster1_Flanke(CLK := bTaster1);
bTaster2_Flanke(CLK := bTaster2);
bTaster3_Flanke(CLK := bTaster3);
bTaster4_Flanke(CLK := bTaster4);
bTaster5_Flanke(CLK := bTaster5);	
bTaster6_Flanke(CLK := bTaster6);
bTaster7_Flanke(CLK := bTaster7);
bTaster8_Flanke(CLK := bTaster8);


New_Controlword := PDO.Controlword;


CASE Index OF	
	// ********** Initial steps **********	
	0: // Idle
		CASE Controlmode OF
			E_controlmode.IO_Testmode:
				// In this mode the function are startet by digital inputs.		
				Target_State 			:= E_statemachine_state.Switch_on_disabled;
				PDO.Mode_of_operation 	:= E_Mode_of_operation.No_mode_active;
			
				IF NOT Stop THEN
					IF 		bTaster1_Flanke.Q 	THEN	
						// ********** Profile Torque Mode **********		
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Profile_torque_mode;	
						Target_State 			:= E_statemachine_state.Operation_enabled;
						PDO.Target_torque 		:= 50;
						Index := 1;
						
					ELSIF 	bTaster2_Flanke.Q 	THEN	
						// ********** Velocity Mode **********	
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Velocity_mode;
						Target_State 			:= E_statemachine_state.Operation_enabled;
						PDO.vl_target_velocity 	:= 1000;
						Index := 1;
						
					ELSIF 	bTaster3_Flanke.Q 	THEN
						// ********** Profile Velocity Mode **********			
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Profile_velocity_mode;
						Target_State 			:= E_statemachine_state.Operation_enabled;
						PDO.Target_velocity 	:= 100000;			
						Index := 1;
			
					ELSIF 	bTaster4_Flanke.Q 	THEN
						// ********** Profile Position Mode **********	
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Profile_position_mode;
						Target_State 			:= E_statemachine_state.Operation_enabled;
						PDO.Profile_velocity 	:= 1000000;						
						PDO.Target_position 	:= Position_1;	
						Start_Merker 			:= TRUE;
						Index := 1;
						
					ELSIF 	bTaster5_Flanke.Q 	THEN
						// ********** Profile Position Mode **********	
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Profile_position_mode;
						Target_State 			:= E_statemachine_state.Operation_enabled;
						PDO.Profile_velocity 	:= 100000;
						PDO.Target_position 	:= Position_2;	
						Start_Merker 			:= TRUE;
						Index := 1;
						
					ELSIF 	bTaster6_Flanke.Q 	THEN  
						// ************* Homing mode **************		
						Homing_parameters.Homing_mode := E_Homing_mode.Homing_on_current_position;			
						Index := 20;				
						
					ELSIF 	bTaster7_Flanke.Q 	THEN	
						// ********** Encoder alignment **********				
						Index := 30;								
					
					ELSIF 	bTaster8_Flanke.Q	THEN
						// ********** CAN Object Testing **********	
						CAN_Object_Tests[0].CAN_Object := DS402_Object_List.Controlword;
						CAN_Object_Tests[1].CAN_Object := DS402_Object_List.Statusword;
						CAN_Object_Tests[2].CAN_Object := DS402_Object_List.Position_actual_value;
						CAN_Object_Testing(NodeID := NodeID, CAN_Objects := CAN_Object_Tests, Start := TRUE);		
						Index := 10;	
					
					END_IF			
				END_IF					
				New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);	
						
				
			E_Controlmode.Manual:
				// The user have to set the pdo values or the target state manually.
				Index := 255;
			
		END_CASE
		
		
	1: // Start process
		IF 	STOP THEN	
			Target_State := E_statemachine_state.Switch_on_disabled;
			Index := 3;	
		ELSIF Current_State = E_statemachine_state.Operation_enabled THEN 	
			Index := 2;			
		END_IF;		
	
		New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);	
				
		
	2: // Mode specific
		New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);
	
		CASE PDO.Mode_of_operation OF				
			E_Mode_of_operation.Profile_position_mode:
				Profile_Position_Mode(Current_State:=Current_State, Statusword:=PDO.Statusword, Controlword:=New_Controlword, Start:=Start_Merker, Finished=>Finished);
				
				
		END_CASE
				
		IF STOP THEN 
			Target_State := E_statemachine_state.Switch_on_disabled;
			New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);	
			Index := 3; 
		END_IF
					
		
	3:	// Stop process
		Target_State := E_statemachine_state.Switch_on_disabled;	
		New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);			
		IF Current_State = E_statemachine_state.Switch_on_disabled THEN	Index := 0;	END_IF
		
		
	10:	// ********** CAN Object Testing **********	
		CAN_Object_Testing(NodeID := NodeID, CAN_Objects := CAN_Object_Tests, Start := FALSE);			
		IF CAN_Object_Testing.Finished AND STOP THEN	Index := 0;	END_IF
			
		
	20:	// ************* Homing mode **************
		Homing_mode(NodeID:=NodeID, Start:=TRUE, Current_State:=Current_State, Statusword:=PDO.Statusword, Homing_parameters:=Homing_parameters, Controlword=>New_Controlword, Mode_of_operation=>PDO.Mode_of_operation);
		Index := Index + 1;
	
	21: // Wait for finish
		Homing_mode(Start:=FALSE, Current_State:=Current_State, Statusword:=PDO.Statusword, Controlword=>New_Controlword);	
		IF Homing_mode.Finished THEN
			Index := 0;
		END_IF
		
		
	30:	// ********** Encoder Alignment ***********	
		Encoder_Alignment(NodeID:=NodeID, Start:=TRUE, Current_State:=Current_State, Statusword:=PDO.Statusword, Controlword=>New_Controlword);
		Index := Index + 1;
	
	31: // Wait for finish
		Encoder_Alignment(Start:=FALSE, Current_State:=Current_State, Statusword:=PDO.Statusword, Controlword=>New_Controlword);	
		IF Encoder_Alignment.Finished THEN
			Index := 0;
		END_IF
		
		
	255: // ************* Manual Mode *************	
		IF Controlmode = E_Controlmode.Manual THEN
			IF (Target_State <> E_Statemachine_State.unknown) THEN
				New_Controlword := CONTROLWORD_STATE_CHANGE(Current_State, Target_State);	
			END_IF			
		ELSE	
			Index := 0;			
		END_IF	
			
	
	ELSE	// Reset to Idle
		Index := 0;
	
END_CASE	


// Write the new Controlword
PDO.Controlword := New_Controlword;]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1795" Count="14" />
      <LineId Id="2193" Count="1" />
      <LineId Id="1811" Count="0" />
      <LineId Id="2195" Count="1" />
      <LineId Id="1812" Count="10" />
      <LineId Id="1954" Count="2" />
      <LineId Id="1823" Count="4" />
      <LineId Id="1829" Count="0" />
      <LineId Id="2360" Count="0" />
      <LineId Id="1830" Count="2" />
      <LineId Id="2265" Count="0" />
      <LineId Id="1833" Count="38" />
      <LineId Id="1876" Count="0" />
      <LineId Id="2124" Count="0" />
      <LineId Id="2275" Count="0" />
      <LineId Id="2043" Count="0" />
      <LineId Id="2042" Count="0" />
      <LineId Id="1878" Count="0" />
      <LineId Id="2040" Count="0" />
      <LineId Id="2039" Count="0" />
      <LineId Id="2038" Count="0" />
      <LineId Id="1880" Count="10" />
      <LineId Id="2358" Count="1" />
      <LineId Id="2354" Count="3" />
      <LineId Id="1891" Count="20" />
      <LineId Id="1915" Count="20" />
      <LineId Id="2024" Count="0" />
      <LineId Id="1936" Count="0" />
      <LineId Id="2026" Count="0" />
      <LineId Id="2025" Count="0" />
      <LineId Id="2037" Count="0" />
      <LineId Id="2033" Count="0" />
      <LineId Id="2031" Count="0" />
      <LineId Id="2034" Count="1" />
      <LineId Id="2123" Count="0" />
      <LineId Id="2036" Count="0" />
      <LineId Id="2111" Count="8" />
      <LineId Id="1937" Count="0" />
      <LineId Id="2120" Count="0" />
      <LineId Id="1938" Count="13" />
      <LineId Id="1959" Count="0" />
      <LineId Id="1958" Count="0" />
      <LineId Id="1957" Count="0" />
      <LineId Id="293" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>