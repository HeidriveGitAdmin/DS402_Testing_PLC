<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="J_Stop_Testing_SM" Id="{c231d705-6bba-41a2-9ea5-2d7b22a70d02}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK J_Stop_Testing_SM
VAR_INPUT
	JST_NodeID					: BYTE; (* This Port No. addresses the CANopen Node (see System Manager) *)
	JST_Start_Testing			: BOOL; (* Send True to start the Stop Testing*)
	JST_Statusword				: WORD;	
	JST_Current_State 			: E_Statemachine_State;
END_VAR
VAR_OUTPUT
	Finished 				: BOOL;
	JST_Controlword 		: WORD;
	Mode_of_operation 		: E_Mode_of_operation	:= E_Mode_of_operation.No_mode_active;
END_VAR
VAR
	// Statemachine variables
	JST_Profile_Velocity_Mode 		: Profile_Velocity_Mode;
	e_Stop_Testing_State_Machine 	: (Idle,
									   Initialise_Drive,
									   Check_Start_Drive_Condition,
								       Stop_Testing, 
									   Check_Stop_Drive_Condition,
									   Start_Drive, 
									   Error_Handling) := Idle; 
									
	e_Operation_Mode : E_Mode_of_operation := E_Mode_of_operation.Profile_position_mode;
	
	e_Stop_Mode :  (Switch_On,					//schnell runterrampen -> Switched on
					Shutdown,					//Disable PS
					Switch_On_Disabled,			//Disable PS
					Vel_To_Zero,				//Ramp down
					Halt,						//stillstand mit dehmoment -> Weiterdrehen
					Quick_Stop,					//schnell runterrampen -> Switch on Disabled
					Fault,						//DISABLE PS
					STO1,						//Disable PS
					STO2,						//Disable PS
					END) := Switch_On;
					
	e_Stop_Type :  (Idle_Output_Stage,
				    Ramp_Down,
					Vel_Zero,
					Quick_Stop);
					
	
	JST_Profile_velocity_parameters	: ST_Velocity_parameters := (vl_target_velocity 	  := 1000,
																 vl_velocity_acceleration := 1000,
																 vl_velocity_deceleration := 1000);
	vl_target_velocity	: INT := 0;
	Target_State: E_STATEMACHINE_STATE;
	
	SDO_WRITE		: FB_SDO_WRITE;
	WriteData		: ARRAY [0..255] OF BYTE;
	
	Vel_Tolerance  : INT := 30;		//Assumed that unit is RPM
	Stop_Tolerance : INT := 5;
	// Trash Variables 
	Temp : BOOL := TRUE;
	JumpNextState : BOOL := FALSE;
	
	//Timer variables
	Toff : TIME := T#2000MS;
	fbTON : TON := (PT := Toff);
	Elapsed_Time : TIME;
	
	//Message logging variables
	fb_Message_Logging : FB_Message_Logging;
END_VAR

VAR CONSTANT
	Start_Timer : BOOL := TRUE;
	Reset_Timer : BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE e_Stop_Testing_State_Machine OF
	
	Idle:
		IF JST_Start_Testing THEN
			e_Stop_Testing_State_Machine := Start_Drive;
		ELSE
			e_Stop_Testing_State_Machine := Idle;
		END_IF
		
//---------------------Start Drive SM-----------------------------------
	Initialise_Drive:
	
		CASE e_Operation_Mode OF
			
			e_Operation_Mode.Profile_position_mode:
				// Vel = 1000 ; Acc = 1000 ; Dec = 1000, Pos = 10000000	
				IF NOT JST_Profile_Velocity_Mode.Finished THEN
					//just want to set acc and dec but not enable the drive
					JST_Profile_Velocity_Mode (NodeID := JST_NodeID,		//PVM just because the param for acc and dec are set and the same as in PPM
						   Start := TRUE,
						   Current_State := JST_Current_State,
						   Statusword := JST_Statusword,
						   Profile_velocity_parameters := JST_Profile_velocity_parameters,
						   Controlword => JST_Controlword);
					JST_Controlword := CONTROLWORD_STATE_CHANGE(JST_Current_State, E_Statemachine_State.Switch_on_disabled);
				ELSE
					WHILE Temp = TRUE DO
						PDO.Mode_of_operation 	:= E_Mode_of_operation.Profile_position_mode;		//Maybe its enought to set it once?
						PDO.Profile_velocity 	:= JST_Profile_velocity_parameters.vl_target_velocity;
						PDO.Target_position 	:= 16#1000000;    // need to evaluate a good value 
						Temp := FALSE;
					END_WHILE
					//Profile position FB how to use?
					PDO.Target_position 	:= 
					JST_Controlword := CONTROLWORD_STATE_CHANGE(JST_Current_State, E_statemachine_state.Operation_enabled);
					e_Stop_Testing_State_Machine := Check_Start_Drive_Condition;
				END_IF
								
			e_Operation_Mode.Velocity_mode:
				// Vel = 1000
				// // Start Drive, Wait for SDO written then change state
				e_Stop_Testing_State_Machine := Check_Start_Drive_Condition;
				
			e_Operation_Mode.Profile_velocity_mode:
				// Vel = 1000 ; Acc = 1000 ; Dec = 500
				// Start Drive, Wait for SDO written then change state
				e_Stop_Testing_State_Machine := Check_Start_Drive_Condition;
				
			e_Operation_Mode.Profile_torque_mode:
				// Torque = 100 pro mill
				// Start Drive, Wait for SDO written then change state
				e_Stop_Testing_State_Machine := Check_Start_Drive_Condition;
		END_CASE
		
		
//------------------Check Drive Condition SM-----------------------------
	Check_Start_Drive_Condition:
	
		CASE e_Operation_Mode OF
			
			e_Operation_Mode.Profile_position_mode:
				IF ABS(PDO.Velocity_actual_value - JST_Profile_velocity_parameters.vl_target_velocity) < Vel_Tolerance 
				   AND PDO.Statusword = E_Statusword_Bits.Target_reached THEN
						e_Stop_Testing_State_Machine := Stop_Testing;
				ELSIF PDO.Statusword = E_Statusword_Bits.Fault THEN
						e_Stop_Testing_State_Machine := Error_Handling;
				ELSE
						;
				END_IF
				// Wait for desired speed 
				// true change state / false wirte msg log
			e_Operation_Mode.Velocity_mode:
				// Wait for desired speed 
				// true change state / false wirte msg log
			e_Operation_Mode.Profile_velocity_mode:
				// Check acc and dec
				// Wait for desired speed 
				// true change state / false wirte msg log
			e_Operation_Mode.Profile_torque_mode:
				// check torque
				// true change state / false wirte msg log
		END_CASE
		
//------------------Stop Testing SM--------------------------------------		
	Stop_Testing:
	
		CASE e_Operation_Mode OF
		//----------testing in Profile Position Mode---------------------
			e_Operation_Mode.Profile_position_mode:
					
				CASE e_Stop_Mode OF
				//Trigger Stopp and start timer
					Switch_On:
						JST_Controlword := CONTROLWORD_STATE_CHANGE(JST_Current_State, E_statemachine_state.Switched_on);						
						fbTON(IN := Start_Timer);
						
						e_Stop_Type := Idle_Output_Stage;
					Shutdown:
						JST_Controlword := CONTROLWORD_STATE_CHANGE(JST_Current_State, E_statemachine_state.Ready_to_switch_on);						
						fbTON(IN := Start_Timer);
						
						e_Stop_Type := Idle_Output_Stage;
					Switch_On_Disabled:
						//Trigger Stopp
						
						e_Stop_Type := Idle_Output_Stage;
					Vel_To_Zero:
						//Trigger Stopp
						
						e_Stop_Type := Vel_Zero;
					Halt:
						//Trigger Stopp
						
						e_Stop_Type := Vel_Zero;
					Quick_Stop:
						//Trigger Stopp
						
						e_Stop_Type := Quick_Stop;
					Fault:
						//Trigger Stopp
						
						e_Stop_Type := Idle_Output_Stage;
					STO1:
						//Trigger Stopp
						
						e_Stop_Type := Idle_Output_Stage;
					STO2:
						//Trigger Stopp
						
						e_Stop_Type := Idle_Output_Stage;
						
						e_Operation_Mode := e_Operation_Mode.Velocity_mode;
				END_CASE
				
				
			e_Operation_Mode.Velocity_mode:
				;
			e_Operation_Mode.Profile_velocity_mode:
				;
			e_Operation_Mode.Profile_torque_mode:
				;
		END_CASE
		e_Stop_Testing_State_Machine := Check_Stop_Drive_Condition;
		
//---------------------Check Drive Stop------------------------------		
	Check_Stop_Drive_Condition:
		
		CASE e_Stop_Type OF
			
			Idle_Output_Stage:
				// Check for Idle
				IF ABS(PDO.Velocity_actual_value) < Stop_Tolerance AND fbTon.Q = FALSE THEN
					fbTON(ET => Elapsed_Time, IN := Reset_Timer);
					fb_Message_Logging(Testing_Mode := 'Operation Enable -> Switch_On',
									   Operation_Mode := e_Operation_Mode.Profile_position_mode,
									   Desired_Value := TIME_TO_INT(Toff),
									   Real_Value := TIME_TO_INT(Elapsed_Time),
									   Ranking := J_E_Test_Ranking.OK,
									   Comment := 'PowerStage enabled, Vel=0 in < 2s');
				ELSIF fbTON.Q = TRUE AND ABS(PDO.Velocity_actual_value) > Stop_Tolerance  THEN
					fb_Message_Logging(Testing_Mode := 'Operation Enable -> Switch_On',
									   Operation_Mode := e_Operation_Mode.Profile_position_mode,
									   Desired_Value := TIME_TO_INT(Toff),
									   Real_Value := TIME_TO_INT(Elapsed_Time),
									   Ranking := J_E_Test_Ranking.Issues,
									   Comment := 'PowerStage enabled, Vel>0 after 2s');
				// Maybe we need another else for more detailed logging
				END_IF
				//---------------------------------
				IF fb_Message_Logging.Finished THEN
					e_Stop_Testing_State_Machine := Start_Drive;
				END_IF
				
			Ramp_Down:
				;
			Vel_Zero:
				;
			Quick_Stop:
				;
		END_CASE
//--------------------Start Drive Angain-----------------------------------------------------	
	Start_Drive: 
	
		CASE e_Stop_Mode OF
			
			Switch_On:
				JST_Controlword := CONTROLWORD_STATE_CHANGE(JST_Current_State, E_statemachine_state.Operation_enabled);	
				e_Stop_Mode := Shutdown;					
			Shutdown:
				JST_Controlword := CONTROLWORD_STATE_CHANGE(JST_Current_State, E_statemachine_state.Switched_on);
				e_Stop_Mode := Switch_On_Disabled;						
			Switch_On_Disabled:
				//Start again
				e_Stop_Mode := Vel_To_Zero;
			Vel_To_Zero:
				//Start again;
				e_Stop_Mode := Halt;
			Halt:
				//Start again
				e_Stop_Mode := Quick_Stop;
			Quick_Stop:
				//Start again
				e_Stop_Mode := Fault;
			Fault:
				//Start again
				e_Stop_Mode := STO1;
			STO1:
				//Start again
				e_Stop_Mode := STO2;
			STO2:
				//Start again
				e_Stop_Mode := Switch_On;
		END_CASE
		e_Stop_Testing_State_Machine := Stop_Testing;
//-------------------------Error Handling------------------------------------------
	Error_Handling:
		;
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="J_Stop_Testing_SM">
      <LineId Id="1" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="283" Count="4" />
      <LineId Id="282" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="1" />
      <LineId Id="291" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="288" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="297" Count="1" />
      <LineId Id="295" Count="1" />
      <LineId Id="294" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="152" Count="3" />
      <LineId Id="9" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="176" Count="2" />
      <LineId Id="339" Count="1" />
      <LineId Id="180" Count="29" />
      <LineId Id="217" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="220" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="144" Count="3" />
      <LineId Id="143" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="391" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="311" Count="1" />
      <LineId Id="320" Count="0" />
      <LineId Id="322" Count="1" />
      <LineId Id="325" Count="1" />
      <LineId Id="337" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="332" Count="3" />
      <LineId Id="317" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="328" Count="3" />
      <LineId Id="310" Count="0" />
      <LineId Id="223" Count="5" />
      <LineId Id="71" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="345" Count="1" />
      <LineId Id="393" Count="0" />
      <LineId Id="350" Count="1" />
      <LineId Id="394" Count="0" />
      <LineId Id="355" Count="2" />
      <LineId Id="359" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>