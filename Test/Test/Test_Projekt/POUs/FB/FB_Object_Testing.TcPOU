<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_Object_Testing" Id="{b786489c-8b6d-4a02-93be-6647e41b4447}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Object_Testing
VAR_INPUT
	Start			: BOOL;
	Complete_test	: BOOL := FALSE;	
	RPDO_Nr			: BYTE := 0;
	TPDO_Nr			: BYTE := 0;
END_VAR
VAR_IN_OUT
	CAN_Object		: ST_CAN_Object;	
END_VAR
VAR_OUTPUT
	Finished		: BOOL := FALSE;	
END_VAR
VAR
	State			: INT := 0;
	i				: BYTE;
	
	Data			: ARRAY [0..255] OF BYTE;	
	SDO_READ		: FB_SDO_READ;
	SDO_WRITE		: FB_SDO_WRITE;
	
	Message			: STRING(128);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Start AND State = 255 THEN 
	Finished 	:= FALSE;
	State 		:= 0;
END_IF


SDO_READ(StartReading:=FALSE);
SDO_WRITE(StartWriting:=FALSE);


CASE State OF	
	// ************** Init **************	
	0:	// Init
		IF Start THEN
			IF CAN_Object.Length_Tested THEN 
				CAN_Object.Length_Tested := FALSE;
				CAN_Object.Length_Error := 0;
			ELSE
				CAN_Object.Length_Target := CAN_Object.Length; 
			END_IF
			
			IF CAN_Object.Readable_Tested THEN 
				CAN_Object.Readable_Tested := FALSE;
				CAN_Object.Readable_Error := 0;
				CAN_Object.Read_Value := 0;
			ELSE
				CAN_Object.Readable_Target := CAN_Object.Readable;
			END_IF
			
			IF CAN_Object.Writable_Tested THEN 
				CAN_Object.Writable_Tested := FALSE;
				CAN_Object.Writable_Error := 0; 
			ELSE		
				CAN_Object.Writable_Target := CAN_Object.Writable;
			END_IF
					
			IF CAN_Object.RPDO_Mappable_Tested THEN 
				CAN_Object.RPDO_Mappable_Tested := FALSE;
				CAN_Object.RPDO_Mappable_Error := 0; 
			ELSE		
				CAN_Object.RPDO_Mappable_Target := CAN_Object.RPDO_Mappable;
			END_IF
			
			IF CAN_Object.TPDO_Mappable_Tested THEN 
				CAN_Object.TPDO_Mappable_Tested := FALSE;
				CAN_Object.TPDO_Mappable_Error := 0; 
			ELSE		
				CAN_Object.TPDO_Mappable_Target := CAN_Object.TPDO_Mappable;
			END_IF			
			
			Message := 'Check "';
			Message := CONCAT(Message, CAN_Object.Name);
			Message := CONCAT(Message, '" (0x');
			Message := CONCAT(Message, WORD_TO_HEXSTR(CAN_Object.Index, 4, FALSE));
			Message := CONCAT(Message, ', ');
			Message := CONCAT(Message, BYTE_TO_STRING(CAN_Object.SubIndex));
			Message := CONCAT(Message, ', ');
			Message := CONCAT(Message, BYTE_TO_STRING(CAN_Object.Length * 8));
			Message := CONCAT(Message, ' bits)');
				
			GLB.Logger(Message:=Message);
			
			State := State + 1;
		END_IF
		
		
	// ******* Read and write test ******	
	1:	// Read Test
		IF CAN_Object.Readable_Target OR Complete_Test THEN			
			SDO_READ(
				ADSNetID		:= GLB.ADSNetID_CAN,				
				PortNr 		 	:= 16#1000 + GLB.NodeID,
				CO_Index 		:= CAN_Object.Index,
				CO_SubIndex 	:= CAN_Object.Subindex,
				DataLength 		:= CAN_Object.Length_Target,
				ReadData		=> Data,
				StartReading	:= TRUE	);		
			State := State + 1;
		ELSE				
			State := State + 10;
		END_IF
			
	2: // Read test, wait for finish
		IF SDO_READ.ReadDataAvailable THEN
			CAN_Object.Readable_Tested := TRUE;
			CAN_Object.Readable_Error := SDO_READ.Error;
			CAN_Object.Readable := (CAN_Object.Readable_Error = 0);
			
			Message := 'Reading: ';
			IF CAN_Object.Readable = CAN_Object.Readable_Target THEN
				Message := CONCAT(Message, 'OK');
				IF CAN_Object.Readable THEN
					Message := CONCAT(Message, ' / readable');
				ELSE
					Message := CONCAT(Message, ' / not readable');						
				END_IF
			ELSE
				Message := CONCAT(Message, 'Error');	
				IF CAN_Object.Readable THEN
					Message := CONCAT(Message, ' / should not be readable');
				ELSE
					Message := CONCAT(Message, ' / should be readable');						
				END_IF	
			END_IF	
			GLB.Logger(Message:=Message);
			
			IF CAN_Object.Readable THEN			
				CAN_Object.Read_Value := SHL(BYTE_TO_DWORD(SDO_READ.ReadData[3]),24) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[2]),16) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[1]),8) + BYTE_TO_DWORD(SDO_READ.ReadData[0]);
	
				// If Reading is successful, the length is also correct.
				CAN_Object.Length_Tested := TRUE;	
				CAN_Object.Length := CAN_Object.Length_Target;
				CAN_Object.Length_Error := 0;								
			END_IF
								
			State := State + 9;
		END_IF
	
		
	11:	// Write Test
		IF CAN_Object.Writable_Target OR Complete_Test THEN
			// Use the read value for write value?
			IF CAN_Object.Write_Value_Usage THEN CAN_Object.Write_Value := CAN_Object.Read_Value; END_IF
			
			FOR i := 0 TO CAN_Object.Length - 1 DO
				Data[i] := DWORD_TO_BYTE(SHR(CAN_Object.Write_Value, (8*i)));			
			END_FOR;
			
			SDO_WRITE(
				ADSNetID	:= GLB.ADSNetID_CAN,
				PortNr 		 := 16#1000 + GLB.NodeID,
				CO_Index 	 := CAN_Object.Index,
				CO_SubIndex  := CAN_Object.Subindex,
				DataLength 	 := CAN_Object.Length_Target,
				WriteData 	 := Data,
				StartWriting := TRUE );		
			State := State + 1;
		ELSE
			State := State + 10;
		END_IF
		
	12: // Write test, wait for finish
		IF SDO_WRITE.WriteDataFinished THEN
			CAN_Object.Writable_Tested := TRUE;
			CAN_Object.Writable_Error := SDO_WRITE.Error;
			CAN_Object.Writable := (CAN_Object.Writable_Error = 0);

			Message := 'Writing: ';
			IF CAN_Object.Writable = CAN_Object.Writable_Target THEN
				Message := CONCAT(Message, 'OK');
				IF CAN_Object.Writable THEN
					Message := CONCAT(Message, ' / writable');
				ELSE
					Message := CONCAT(Message, ' / not writable');						
				END_IF
			ELSE
				Message := CONCAT(Message, 'Error');	
				IF CAN_Object.Writable THEN
					Message := CONCAT(Message, ' / should be not writable');
				ELSE
					Message := CONCAT(Message, ' / should be writable');						
				END_IF
			END_IF	
			GLB.Logger(Message:=Message);					
	
			IF CAN_Object.Writable THEN
				CAN_Object.Write_Value := SHL(BYTE_TO_DWORD(SDO_Write.WriteData[3]),24) + SHL(BYTE_TO_DWORD(SDO_Write.WriteData[2]),16) + SHL(BYTE_TO_DWORD(SDO_Write.WriteData[1]),8) + BYTE_TO_DWORD(SDO_Write.WriteData[0]);				
				
				// If Writing is successful, the length is also correct.
				CAN_Object.Length_Tested := TRUE;
				CAN_Object.Length := CAN_Object.Length_Target;			
				CAN_Object.Length_Error := 0;						
			END_IF
		
			State := State + 9;				
		END_IF
		
		
	21: // Analyse the readable and writable tests
			// The PDO tests make only sense, if the object exists. This means that it must be readable and/or writable.
			IF CAN_Object.Readable OR CAN_Object.Writable THEN
				// Go to PDO tests
				State := 101;
			ELSE	
				IF Complete_test THEN
					// Additional tests
					i := 1;
					State := State + 1;
				ELSE
					// Test is finished with error.
					State := 254;					
				END_IF					
			END_IF
		
	
	22: // Redo the read test with other length
		SDO_READ(
			ADSNetID		:= GLB.ADSNetID_CAN,				
			PortNr 		 	:= 16#1000 + GLB.NodeID,
			CO_Index 		:= CAN_Object.Index,
			CO_SubIndex 	:= CAN_Object.Subindex,
			DataLength 		:= i,
			ReadData		=> Data,
			StartReading	:= TRUE	);		
		State := State + 1;	
		
	23: // Read test, wait for finish
		IF SDO_READ.ReadDataAvailable THEN
			CAN_Object.Readable_Tested := TRUE;
			CAN_Object.Readable_Error := SDO_READ.Error;
			CAN_Object.Readable := (CAN_Object.Readable_Error = 0);
						
			IF CAN_Object.Readable THEN
				CAN_Object.Read_Value := SHL(BYTE_TO_DWORD(SDO_READ.ReadData[3]),24) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[2]),16) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[1]),8) + BYTE_TO_DWORD(SDO_READ.ReadData[0]);	

				// If Reading is successful, the correct length is found.
				CAN_Object.Length_Tested := TRUE;	
				CAN_Object.Length := i;
				IF i > CAN_Object.Length_Target THEN			
					CAN_Object.Length_Error := 16#06070012;	
					CAN_Object.Readable_Error := 16#06070012;					
				ELSIF i < CAN_Object.Length_Target THEN
					CAN_Object.Length_Error := 16#06070013;	
					CAN_Object.Readable_Error := 16#06070013;				
				END_IF
				
				State := State + 1;
				
			ELSE					
				// This length is also wrong, check next length or resume with write test
				CASE i OF	
					1:
						IF (CAN_Object.Length_Target = 2) THEN
							// next length is 4 byte							
							i := 4;
							State := State - 1;							
						ELSE
							// next length is 2 byte							
							i := 2;
							State := State - 1;	
						END_IF
						
					2:
						IF (CAN_Object.Length_Target = 4) THEN
							// Continue with write test
							i := 1;
							State := State + 1;
						ELSE
							// next length is 4 byte
							i := 4;
							State := State - 1;	
						END_IF						
	
					4:
						// Continue with write test
						i := 1;
						State := State + 1;
						
					ELSE
						// If i value is strange, continue with write test
						i := 1;						
						State := State + 1;		
				END_CASE					
			END_IF		
		END_IF

		
	24: // Redo the write test with other length
		SDO_WRITE(
			ADSNetID	:= GLB.ADSNetID_CAN,
			PortNr 		 := 16#1000 + GLB.NodeID,
			CO_Index 	 := CAN_Object.Index,
			CO_SubIndex  := CAN_Object.Subindex,
			DataLength 	 := i,
			WriteData 	 := Data,
			StartWriting := TRUE );		
		State := State + 1;	
		
	25: // Write test, wait for finish
		IF SDO_WRITE.WriteDataFinished THEN
			CAN_Object.Writable_Tested := TRUE;
			CAN_Object.Writable_Error := SDO_WRITE.Error;
			CAN_Object.Writable := (CAN_Object.Writable_Error = 0);
						
			IF CAN_Object.Writable THEN
				CAN_Object.Write_Value := SHL(BYTE_TO_DWORD(SDO_Write.WriteData[3]),24) + SHL(BYTE_TO_DWORD(SDO_Write.WriteData[2]),16) + SHL(BYTE_TO_DWORD(SDO_Write.WriteData[1]),8) + BYTE_TO_DWORD(SDO_Write.WriteData[0]);				
				
				// If Writing is successful, the length is also correct.
				CAN_Object.Length_Tested := TRUE;
				CAN_Object.Length := i;		

				IF i > CAN_Object.Length_Target THEN			
					IF (CAN_Object.Length_Error = 16#06070013) THEN CAN_Object.Length_Error := 16#06070010; ELSE CAN_Object.Length_Error := 16#06070012; END_IF	
					CAN_Object.Writable_Error := 16#06070012;					
				ELSIF i < CAN_Object.Length_Target THEN
					IF (CAN_Object.Length_Error = 16#06070012) THEN CAN_Object.Length_Error := 16#06070010; ELSE CAN_Object.Length_Error := 16#06070013; END_IF
					CAN_Object.Writable_Error := 16#06070013;				
				END_IF
				
				State := State + 1;
			ELSE					
				// This length is also wrong, check next length or resume with next step
				CASE i OF	
					1:
						IF (CAN_Object.Length_Target = 2) THEN
							// next length is 4 byte							
							i := 4;
							State := State - 1;	
						ELSE
							// next length is 2 byte							
							i := 2;
							State := State - 1;	
						END_IF
						
					2:
						IF (CAN_Object.Length_Target = 4) THEN
							// Continue with write test
							State := State + 1;
						ELSE
							// next length is 4 byte
							i := 4;
							State := State - 1;	
						END_IF						
	
					4:
						// Continue with write test
						State := State + 1;
						
					ELSE
						// If i value is strange, continue with write test
						i := 1;						
						State := State + 1;		
				END_CASE				
			END_IF		
		END_IF
	
		
	26: // If the object is now found, resume with the PDO tests. Otherwise the test is finished with error.
		IF CAN_Object.Readable OR CAN_Object.Writable THEN
			State := 101;	
		ELSE
			State := 254;
		END_IF	
		
		
	// *********** PDO Tests ************
	101: // RPDO test
		IF CAN_Object.RPDO_Mappable_Target OR Complete_Test THEN	
			Data[0] := CAN_Object.Length * 8;
			Data[1] := CAN_Object.SubIndex;
			Data[2] := DWORD_TO_BYTE(CAN_Object.Index);
			Data[3] := DWORD_TO_BYTE(SHR(CAN_Object.Index,8));
				
			SDO_WRITE(
				ADSNetID	:= GLB.ADSNetID_CAN,
				PortNr 		 := 16#1000 + GLB.NodeID,
				CO_Index 	 := 16#1600 + RPDO_Nr,
				CO_SubIndex  := 1,
				DataLength 	 := 4,
				StartWriting := TRUE,
				WriteData 	 := Data );	
			State := State + 1;
		ELSE			
			State := State + 10;
		END_IF
			
	102: // RPDO test, wait for finish
		IF SDO_WRITE.WriteDataFinished THEN
			CAN_Object.RPDO_Mappable_Tested := TRUE;
			CAN_Object.RPDO_Mappable_Error := SDO_WRITE.Error;
			CAN_Object.RPDO_Mappable := (CAN_Object.RPDO_Mappable_Error = 0);	
			
			Message := 'Mappable RPDO: ';
			IF CAN_Object.RPDO_Mappable = CAN_Object.RPDO_Mappable_Target THEN
				Message := CONCAT(Message, 'OK');
				IF CAN_Object.RPDO_Mappable THEN
					Message := CONCAT(Message, ' / mappable');
				ELSE
					Message := CONCAT(Message, ' / not mappable');						
				END_IF
			ELSE
				Message := CONCAT(Message, 'Error');	
				IF CAN_Object.RPDO_Mappable THEN
					Message := CONCAT(Message, ' / should be not mappable');
				ELSE
					Message := CONCAT(Message, ' / should be mappable');						
				END_IF
			END_IF	
			GLB.Logger(Message:=Message);								
		
			State := State + 9;
		END_IF	

				
	111: // TPDO test
		IF CAN_Object.RPDO_Mappable_Target OR Complete_Test THEN		
			Data[0] := CAN_Object.Length * 8;
			Data[1] := CAN_Object.SubIndex;
			Data[2] := DWORD_TO_BYTE(CAN_Object.Index);
			Data[3] := DWORD_TO_BYTE(SHR(CAN_Object.Index,8));
	 
			SDO_WRITE(
				ADSNetID	:= GLB.ADSNetID_CAN,
				PortNr 		 := 16#1000 + GLB.NodeID,
				CO_Index 	 := 16#1A00 + TPDO_Nr,
				CO_SubIndex  := 1,
				DataLength 	 := 4,
				StartWriting := TRUE,
				WriteData 	 := Data );				
			State := State + 1;
		ELSE
			State := 254;
		END_IF
			
	112: // TPDO test, wait for finish
		IF SDO_WRITE.WriteDataFinished THEN
			CAN_Object.TPDO_Mappable_Tested := TRUE;
			CAN_Object.TPDO_Mappable_Error := SDO_WRITE.Error;
			CAN_Object.TPDO_Mappable := (CAN_Object.TPDO_Mappable_Error = 0);	
				
			Message := 'Mappable TPDO: ';
			IF CAN_Object.TPDO_Mappable = CAN_Object.TPDO_Mappable_Target THEN
				Message := CONCAT(Message, 'OK');
				IF CAN_Object.TPDO_Mappable THEN
					Message := CONCAT(Message, ' / mappable');
				ELSE
					Message := CONCAT(Message, ' / not mappable');						
				END_IF
			ELSE
				Message := CONCAT(Message, 'Error');	
				IF CAN_Object.TPDO_Mappable THEN
					Message := CONCAT(Message, ' / should be not mappable');
				ELSE
					Message := CONCAT(Message, ' / should be mappable');						
				END_IF
			END_IF	
			GLB.Logger(Message:=Message);	
			
			State := 254;
		END_IF

		
	// ************ Finished ************	
	254: // Check error 
	IF (CAN_Object.Mandatory > 0) OR CAN_Object.Readable OR CAN_Object.Writable THEN
		CAN_Object.Error := ((CAN_Object.Readable <> CAN_Object.Readable_Target) OR (CAN_Object.Writable <> CAN_Object.Writable_Target) OR  
							(CAN_Object.RPDO_Mappable <> CAN_Object.RPDO_Mappable_Target) OR (CAN_Object.TPDO_Mappable <> CAN_Object.TPDO_Mappable_Target) OR
							(CAN_Object.Length <> CAN_Object.Length_Target));

		Message := 'Result: ';
		IF CAN_Object.Error THEN
			Message := CONCAT(Message, 'Error');
		ELSE				
			Message := CONCAT(Message, 'OK');
		END_IF	
		Message := CONCAT(Message, '$0A**********');		
		GLB.Logger(Message:=Message, SaveFlag:=TRUE);	
	ELSE
		// Optional object not exists
		Message := 'Result: OK / Optional object does not exist';	
		Message := CONCAT(Message, '$0A**********');		
		GLB.Logger(Message:=Message, SaveFlag:=TRUE);	
	
	END_IF
	
		Finished := TRUE;	
		State := 255;
		
	255: // Tests finished
		Finished := TRUE;	
	
	
	ELSE	
		State := 254;
		
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_Object_Testing">
      <LineId Id="455" Count="0" />
      <LineId Id="1244" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="458" Count="7" />
      <LineId Id="1235" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="627" Count="17" />
      <LineId Id="646" Count="16" />
      <LineId Id="804" Count="0" />
      <LineId Id="1374" Count="0" />
      <LineId Id="1376" Count="0" />
      <LineId Id="1391" Count="2" />
      <LineId Id="1395" Count="1" />
      <LineId Id="1394" Count="0" />
      <LineId Id="1397" Count="0" />
      <LineId Id="1389" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1390" Count="0" />
      <LineId Id="664" Count="2" />
      <LineId Id="1237" Count="0" />
      <LineId Id="788" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="779" Count="0" />
      <LineId Id="668" Count="5" />
      <LineId Id="802" Count="0" />
      <LineId Id="674" Count="2" />
      <LineId Id="780" Count="2" />
      <LineId Id="677" Count="2" />
      <LineId Id="681" Count="0" />
      <LineId Id="900" Count="0" />
      <LineId Id="972" Count="0" />
      <LineId Id="1274" Count="0" />
      <LineId Id="1277" Count="1" />
      <LineId Id="1283" Count="0" />
      <LineId Id="1287" Count="0" />
      <LineId Id="1284" Count="0" />
      <LineId Id="1288" Count="0" />
      <LineId Id="1285" Count="0" />
      <LineId Id="1280" Count="1" />
      <LineId Id="1290" Count="3" />
      <LineId Id="1289" Count="0" />
      <LineId Id="1279" Count="0" />
      <LineId Id="1271" Count="0" />
      <LineId Id="1270" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="1030" Count="1" />
      <LineId Id="1029" Count="0" />
      <LineId Id="891" Count="1" />
      <LineId Id="1069" Count="0" />
      <LineId Id="834" Count="0" />
      <LineId Id="684" Count="5" />
      <LineId Id="798" Count="0" />
      <LineId Id="1045" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="691" Count="2" />
      <LineId Id="823" Count="0" />
      <LineId Id="695" Count="5" />
      <LineId Id="702" Count="0" />
      <LineId Id="820" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="799" Count="1" />
      <LineId Id="704" Count="0" />
      <LineId Id="801" Count="0" />
      <LineId Id="705" Count="2" />
      <LineId Id="709" Count="0" />
      <LineId Id="974" Count="0" />
      <LineId Id="1297" Count="16" />
      <LineId Id="975" Count="0" />
      <LineId Id="1296" Count="0" />
      <LineId Id="977" Count="0" />
      <LineId Id="1034" Count="0" />
      <LineId Id="1295" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="978" Count="0" />
      <LineId Id="980" Count="0" />
      <LineId Id="1070" Count="0" />
      <LineId Id="713" Count="1" />
      <LineId Id="916" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="924" Count="1" />
      <LineId Id="991" Count="2" />
      <LineId Id="1002" Count="0" />
      <LineId Id="994" Count="1" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1036" Count="0" />
      <LineId Id="996" Count="1" />
      <LineId Id="1003" Count="0" />
      <LineId Id="998" Count="1" />
      <LineId Id="952" Count="0" />
      <LineId Id="970" Count="0" />
      <LineId Id="1055" Count="0" />
      <LineId Id="1007" Count="0" />
      <LineId Id="1047" Count="7" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1035" Count="0" />
      <LineId Id="1011" Count="2" />
      <LineId Id="1015" Count="2" />
      <LineId Id="1019" Count="0" />
      <LineId Id="1038" Count="0" />
      <LineId Id="1040" Count="0" />
      <LineId Id="1039" Count="0" />
      <LineId Id="1020" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1043" Count="0" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1072" Count="0" />
      <LineId Id="1080" Count="0" />
      <LineId Id="1073" Count="0" />
      <LineId Id="1071" Count="0" />
      <LineId Id="1044" Count="0" />
      <LineId Id="1160" Count="0" />
      <LineId Id="1028" Count="0" />
      <LineId Id="1042" Count="0" />
      <LineId Id="1041" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1162" Count="0" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1207" Count="0" />
      <LineId Id="1164" Count="0" />
      <LineId Id="1175" Count="0" />
      <LineId Id="1165" Count="0" />
      <LineId Id="1208" Count="0" />
      <LineId Id="1163" Count="0" />
      <LineId Id="1161" Count="0" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1167" Count="0" />
      <LineId Id="1171" Count="1" />
      <LineId Id="1168" Count="1" />
      <LineId Id="1173" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1209" Count="0" />
      <LineId Id="1150" Count="0" />
      <LineId Id="1166" Count="0" />
      <LineId Id="1152" Count="1" />
      <LineId Id="1158" Count="0" />
      <LineId Id="1154" Count="2" />
      <LineId Id="1176" Count="0" />
      <LineId Id="1159" Count="0" />
      <LineId Id="1157" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1027" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="1125" Count="0" />
      <LineId Id="1064" Count="0" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1126" Count="6" />
      <LineId Id="1090" Count="3" />
      <LineId Id="1133" Count="10" />
      <LineId Id="1104" Count="10" />
      <LineId Id="1177" Count="5" />
      <LineId Id="1210" Count="0" />
      <LineId Id="1183" Count="2" />
      <LineId Id="1211" Count="0" />
      <LineId Id="1186" Count="4" />
      <LineId Id="1192" Count="3" />
      <LineId Id="1212" Count="0" />
      <LineId Id="1196" Count="3" />
      <LineId Id="1201" Count="5" />
      <LineId Id="1122" Count="1" />
      <LineId Id="961" Count="0" />
      <LineId Id="1124" Count="0" />
      <LineId Id="1081" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="926" Count="0" />
      <LineId Id="954" Count="2" />
      <LineId Id="968" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="719" Count="0" />
      <LineId Id="797" Count="0" />
      <LineId Id="720" Count="12" />
      <LineId Id="813" Count="2" />
      <LineId Id="733" Count="6" />
      <LineId Id="1331" Count="0" />
      <LineId Id="1315" Count="15" />
      <LineId Id="824" Count="0" />
      <LineId Id="1314" Count="0" />
      <LineId Id="740" Count="4" />
      <LineId Id="816" Count="0" />
      <LineId Id="794" Count="2" />
      <LineId Id="745" Count="9" />
      <LineId Id="817" Count="2" />
      <LineId Id="755" Count="3" />
      <LineId Id="911" Count="0" />
      <LineId Id="760" Count="1" />
      <LineId Id="825" Count="0" />
      <LineId Id="1334" Count="15" />
      <LineId Id="1332" Count="1" />
      <LineId Id="762" Count="1" />
      <LineId Id="982" Count="0" />
      <LineId Id="981" Count="0" />
      <LineId Id="1234" Count="0" />
      <LineId Id="1238" Count="0" />
      <LineId Id="1401" Count="0" />
      <LineId Id="1240" Count="2" />
      <LineId Id="1370" Count="0" />
      <LineId Id="1351" Count="1" />
      <LineId Id="1368" Count="1" />
      <LineId Id="1353" Count="0" />
      <LineId Id="1366" Count="0" />
      <LineId Id="1398" Count="0" />
      <LineId Id="1350" Count="0" />
      <LineId Id="1367" Count="0" />
      <LineId Id="1402" Count="0" />
      <LineId Id="1407" Count="0" />
      <LineId Id="1413" Count="0" />
      <LineId Id="1406" Count="0" />
      <LineId Id="1403" Count="2" />
      <LineId Id="1239" Count="0" />
      <LineId Id="1246" Count="0" />
      <LineId Id="1243" Count="0" />
      <LineId Id="596" Count="1" />
      <LineId Id="983" Count="1" />
      <LineId Id="598" Count="0" />
      <LineId Id="600" Count="1" />
      <LineId Id="400" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>