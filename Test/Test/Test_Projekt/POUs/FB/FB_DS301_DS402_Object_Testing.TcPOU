<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_DS301_DS402_Object_Testing" Id="{8bcecccf-0172-4904-a369-b9a49f46e69c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DS301_DS402_Object_Testing
VAR_INPUT
	NodeID			: BYTE; (* This Port No. addresses the CANopen Node (see System Manager) *)
	Start			: BOOL;
END_VAR
VAR_OUTPUT
	Finished		: BOOL;
END_VAR
VAR_IN_OUT
	CAN_Objects		: ARRAY [*] OF ST_CAN_Object_Test;
END_VAR
VAR
	State			: BYTE := 0;
	Index			: DINT := 0;
	
	NMT_WRITE		: FB_NMT_WRITE;
	
	SDO_READ		: FB_SDO_READ;
	ReadData		: ARRAY [0..255] OF BYTE;
	
	SDO_WRITE		: FB_SDO_WRITE;
	WriteData		: ARRAY [0..255] OF BYTE;		
			
	RPDO_Nr				: BYTE := 3;	
	RPDO_Current_Number	: BYTE := 0;
	RPDO_Current_Mapped	: DWORD := 0;	
	
	TPDO_Nr				: BYTE := 3;
	TPDO_Current_Number	: BYTE := 0;
	TPDO_Current_Mapped	: DWORD := 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Start AND State = 255 THEN 
	State := 0;
END_IF

SDO_READ(StartReading:=FALSE);
SDO_WRITE(StartWriting:=FALSE);
NMT_WRITE(StartWriting:=FALSE);


CASE State OF	
	// ********** Initial steps **********	
	0: // NMT Set to Preoperational
		NMT_WRITE(
			AdsNetID	:= '5.156.6.243.3.1',
			PortNr		:= 16#1000 + NodeID,
			ADSSTATE	:= ADSSTATE_RUN, 
			DEVSTATE	:= 0,
			StartWriting:=TRUE			
		);	
		
		IF NMT_WRITE.WriteDataFinished THEN
			Index := 0;	
			State := State + 1;	
		END_IF
		

	1:	// RPDO disable
		WriteData[3] := 16#80;
		WriteData[2] := 0;			
		WriteData[1] := RPDO_Nr + 1;
		WriteData[0] := NodeID;	
			
		SDO_WRITE(
			ADSNetID		:= '5.156.6.243.3.1',
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 	 	:= 16#1400 + RPDO_Nr,
			CO_SubIndex  	:= 1,
			DataLength 	 	:= 4,
			StartWriting 	:= TRUE,
			WriteData 	 	:= WriteData );
		
		IF SDO_WRITE.WriteDataFinished THEN
			State := State + 1;
		END_IF	
		
		
	2:	// RPDO Current Number of mapped objects
		SDO_READ(
			ADSNetID		:= '5.156.6.243.3.1',				
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 		:= 16#1600 + RPDO_Nr,
			CO_SubIndex 	:= 0,
			DataLength 		:= 1,
			StartReading	:= TRUE	);
		
		IF SDO_READ.ReadDataAvailable THEN
			RPDO_Current_Number := SDO_READ.ReadData[0];
			State := State + 1;
		END_IF
		
	
	3:	// RPDO Current mapped object
		SDO_READ(
			ADSNetID		:= '5.156.6.243.3.1',				
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 		:= 16#1600 + RPDO_Nr,
			CO_SubIndex 	:= 1,
			DataLength 		:= 4,
			StartReading	:= TRUE	);
		
		IF SDO_READ.ReadDataAvailable THEN
			RPDO_Current_Mapped := SHL(BYTE_TO_DWORD(SDO_READ.ReadData[3]),24) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[2]),16) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[1]),8) + BYTE_TO_DWORD(SDO_READ.ReadData[0]);								
			State := State + 1;
		END_IF		
			
		
	4:	// TPDO disable
		WriteData[3] := 16#80;
		WriteData[2] := 0;			
		WriteData[1] := TPDO_Nr;
		WriteData[0] := NodeID + 16#80;	
			
		SDO_WRITE(
			ADSNetID		:= '5.156.6.243.3.1',
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 	 	:= 16#1800 + TPDO_Nr,
			CO_SubIndex  	:= 1,
			DataLength 	 	:= 4,
			StartWriting 	:= TRUE,
			WriteData 	 	:= WriteData );
		
		IF SDO_WRITE.WriteDataFinished THEN
			State := State + 1;
		END_IF	
		

	5:	// TPDO Current Number of mapped objects
		SDO_READ(
			ADSNetID		:= '5.156.6.243.3.1',				
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 		:= 16#1A00 + TPDO_Nr,
			CO_SubIndex 	:= 0,
			DataLength 		:= 1,
			StartReading	:= TRUE	);
		
		IF SDO_READ.ReadDataAvailable THEN
			TPDO_Current_Number := SDO_READ.ReadData[0];			
			State := State + 1;
		END_IF
		

	6:	// TPDO Current mapped object
		SDO_READ(
			ADSNetID		:= '5.156.6.243.3.1',				
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 		:= 16#1A00 + TPDO_Nr,
			CO_SubIndex 	:= 1,
			DataLength 		:= 4,
			StartReading	:= TRUE	);
		
		IF SDO_READ.ReadDataAvailable THEN
			TPDO_Current_Mapped := SHL(BYTE_TO_DWORD(SDO_READ.ReadData[3]),24) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[2]),16) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[1]),8) + BYTE_TO_DWORD(SDO_READ.ReadData[0]);							
			State := 16;
		END_IF		
		
		
		
	// ********** Test steps **********
	16:	// Init
		CAN_Objects[Index].SDO_Read_Done := FALSE;
		CAN_Objects[Index].SDO_Read_Value := 0;				
		CAN_Objects[Index].SDO_Read_Error := 0;	
		CAN_Objects[Index].SDO_Write_Done := FALSE;			
		CAN_Objects[Index].SDO_Write_Error := 0;	
		CAN_Objects[Index].RPDO_Done := FALSE;			
		CAN_Objects[Index].RPDO_Error := 0;	
		CAN_Objects[Index].TPDO_Done := FALSE;			
		CAN_Objects[Index].TPDO_Error := 0;	

		// Transform value for Write Test
		WriteData[0] := DWORD_TO_BYTE(CAN_Objects[Index].SDO_Write_Value);
		WriteData[1] := DWORD_TO_BYTE(SHR(CAN_Objects[Index].SDO_Write_Value,8));
		WriteData[2] := DWORD_TO_BYTE(SHR(CAN_Objects[Index].SDO_Write_Value,16));
		WriteData[3] := DWORD_TO_BYTE(SHR(CAN_Objects[Index].SDO_Write_Value,24));
		
		State := State + 1;
			
		
	17:	// Read Test
		IF CAN_Objects[Index].CAN_Object.Readable THEN
			SDO_READ(
				ADSNetID		:= '5.156.6.243.3.1',				
				PortNr 		 	:= 16#1000 + NodeID,
				CO_Index 		:= CAN_Objects[Index].CAN_Object.Index,
				CO_SubIndex 	:= CAN_Objects[Index].CAN_Object.Subindex,
				DataLength 		:= CAN_Objects[Index].CAN_Object.Length,
				StartReading	:= TRUE	);
			
			IF SDO_READ.ReadDataAvailable THEN
				CAN_Objects[Index].SDO_Read_Done := TRUE;
				CAN_Objects[Index].SDO_Read_Value := SHL(BYTE_TO_DWORD(SDO_READ.ReadData[3]),24) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[2]),16) + SHL(BYTE_TO_DWORD(SDO_READ.ReadData[1]),8) + BYTE_TO_DWORD(SDO_READ.ReadData[0]);				
				CAN_Objects[Index].SDO_Read_Error := SDO_READ.Error;
				IF CAN_Objects[Index].WriteTest_with_CurrentValue THEN	
					WriteData := SDO_READ.ReadData; 
				END_IF			
		
				State := State + 1;
			END_IF
		ELSE
			// Not done -> Result
			CAN_Objects[Index].SDO_Read_Done := FALSE;
			CAN_Objects[Index].SDO_Read_Value := 0;				
			CAN_Objects[Index].SDO_Read_Error := 0;
						
			State := State + 1;	
		END_IF
	
		
	18:	// Write Test
		IF CAN_Objects[Index].CAN_Object.Writeable THEN
			SDO_WRITE(
				ADSNetID	:= '5.156.6.243.3.1',
				PortNr 		 := 16#1000 + NodeID,
				CO_Index 	 := CAN_Objects[Index].CAN_Object.Index,
				CO_SubIndex  := CAN_Objects[Index].CAN_Object.Subindex,
				DataLength 	 := CAN_Objects[Index].CAN_Object.Length,
				StartWriting := TRUE,
				WriteData 	 := WriteData );
			
			IF SDO_WRITE.WriteDataFinished THEN
				CAN_Objects[Index].SDO_Write_Done := TRUE;
				CAN_Objects[Index].SDO_Write_Value := SHL(BYTE_TO_DWORD(SDO_Write.WriteData[3]),24) + SHL(BYTE_TO_DWORD(SDO_Write.WriteData[2]),16) + SHL(BYTE_TO_DWORD(SDO_Write.WriteData[1]),8) + BYTE_TO_DWORD(SDO_Write.WriteData[0]);				
				CAN_Objects[Index].SDO_Write_Error := SDO_WRITE.Error;
				
				State := State + 1;
			END_IF
		ELSE
			CAN_Objects[Index].SDO_Write_Done := FALSE;
			CAN_Objects[Index].SDO_Write_Value := 0;				
			CAN_Objects[Index].SDO_Write_Error := 0;	
			
			State := State + 1;	
		END_IF			

		
	19: // RPDO test
		IF CAN_Objects[Index].CAN_Object.RPDO_Mappable THEN
			WriteData[0] := CAN_Objects[Index].CAN_Object.Length * 8;
			WriteData[1] := CAN_Objects[Index].CAN_Object.SubIndex;
			WriteData[2] := DWORD_TO_BYTE(CAN_Objects[Index].CAN_Object.Index);
			WriteData[3] := DWORD_TO_BYTE(SHR(CAN_Objects[Index].CAN_Object.Index,8));
		
			SDO_WRITE(
				ADSNetID	:= '5.156.6.243.3.1',
				PortNr 		 := 16#1000 + NodeID,
				CO_Index 	 := 16#1600 + RPDO_Nr,
				CO_SubIndex  := 1,
				DataLength 	 := 4,
				StartWriting := TRUE,
				WriteData 	 := WriteData );			
			
			IF SDO_WRITE.WriteDataFinished THEN
				CAN_Objects[Index].RPDO_Done := TRUE;
				CAN_Objects[Index].RPDO_Error := SDO_WRITE.Error;
				
				State := State + 1;
			END_IF
		ELSE
			CAN_Objects[Index].RPDO_Done := FALSE;	
			CAN_Objects[Index].RPDO_Error := 0;	
			
			State := State + 1;	
		END_IF			

				
	20: // TPDO test
		IF CAN_Objects[Index].CAN_Object.TPDO_Mappable THEN
			WriteData[0] := CAN_Objects[Index].CAN_Object.Length * 8;
			WriteData[1] := CAN_Objects[Index].CAN_Object.SubIndex;
			WriteData[2] := DWORD_TO_BYTE(CAN_Objects[Index].CAN_Object.Index);
			WriteData[3] := DWORD_TO_BYTE(SHR(CAN_Objects[Index].CAN_Object.Index,8));
		
			SDO_WRITE(
				ADSNetID	:= '5.156.6.243.3.1',
				PortNr 		 := 16#1000 + NodeID,
				CO_Index 	 := 16#1A00 + TPDO_Nr,
				CO_SubIndex  := 1,
				DataLength 	 := 4,
				StartWriting := TRUE,
				WriteData 	 := WriteData );			
			
		IF SDO_WRITE.WriteDataFinished THEN
				CAN_Objects[Index].TPDO_Done := TRUE;
				CAN_Objects[Index].TPDO_Error := SDO_WRITE.Error;
				
				State := State + 1;
			END_IF
		ELSE
			CAN_Objects[Index].TPDO_Done := FALSE;	
			CAN_Objects[Index].TPDO_Error := 0;	
			
			State := State + 1;	
		END_IF
		
		
	21: // Next object
		CAN_Objects[Index].Error := (CAN_Objects[Index].SDO_Read_Error > 0) OR (CAN_Objects[Index].SDO_Write_Error > 0) OR (CAN_Objects[Index].RPDO_Error > 0) OR (CAN_Objects[Index].TPDO_Error > 0);
			
		IF Index < UPPER_BOUND(CAN_Objects,1) THEN
			Index := Index + 1;
			State := 16;
		ELSE
			State := 50;
		END_IF
	
		
	// ********** Ending steps **********		
	50:	// RPDO Reset mapped object
		WriteData[0] := DWORD_TO_BYTE(RPDO_Current_Mapped);
		WriteData[1] := DWORD_TO_BYTE(SHR(RPDO_Current_Mapped,8));
		WriteData[2] := DWORD_TO_BYTE(SHR(RPDO_Current_Mapped,16));
		WriteData[3] := DWORD_TO_BYTE(SHR(RPDO_Current_Mapped,24));
		
		SDO_WRITE(
			ADSNetID		:= '5.156.6.243.3.1',			
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 		:= 16#1600 + TPDO_Nr,
			CO_SubIndex 	:= 1,
			DataLength 		:= 4,
			StartWriting	:= TRUE,
			WriteData 	 	:= WriteData );
		
		IF SDO_WRITE.WriteDataFinished THEN
			State := State + 1;
		END_IF		
			
		
	51:	// RPDO Reset Number of mapped objects
		WriteData[0] := RPDO_Current_Number;
			
		SDO_WRITE(
			ADSNetID		:= '5.156.6.243.3.1',
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 		:= 16#1600 + RPDO_Nr,
			CO_SubIndex 	:= 0,
			DataLength 		:= 1,
			StartWriting 	:= TRUE,
			WriteData 	 	:= WriteData );
		
		IF SDO_WRITE.WriteDataFinished THEN
			State := State + 1;
		END_IF			

		
	52:	// RPDO reactivate
		WriteData[3] := 0;
		WriteData[2] := 0;			
		WriteData[1] := RPDO_Nr + 1;
		WriteData[0] := NodeID;	
			
		SDO_WRITE(
			ADSNetID	:= '5.156.6.243.3.1',
			PortNr 		 := 16#1000 + NodeID,
			CO_Index 	 := 16#1400 + RPDO_Nr,
			CO_SubIndex  := 1,
			DataLength 	 := 4,
			StartWriting := TRUE,
			WriteData 	 := WriteData );
		
		IF SDO_WRITE.WriteDataFinished THEN
			State := State + 1;
		END_IF	
		
		
	53:	// TPDO Reset mapped object
		WriteData[0] := DWORD_TO_BYTE(TPDO_Current_Mapped);
		WriteData[1] := DWORD_TO_BYTE(SHR(TPDO_Current_Mapped,8));
		WriteData[2] := DWORD_TO_BYTE(SHR(TPDO_Current_Mapped,16));
		WriteData[3] := DWORD_TO_BYTE(SHR(TPDO_Current_Mapped,24));
		
		SDO_WRITE(
			ADSNetID		:= '5.156.6.243.3.1',			
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 		:= 16#1A00 + TPDO_Nr,
			CO_SubIndex 	:= 1,
			DataLength 		:= 4,
			StartWriting	:= TRUE,
			WriteData 	 	:= WriteData );
		
		IF SDO_WRITE.WriteDataFinished THEN
			State := State + 1;
		END_IF			
			
		
	54:	// TPDO Reset Number of mapped objects
		WriteData[0] := TPDO_Current_Number;
			
		SDO_WRITE(
			ADSNetID		:= '5.156.6.243.3.1',
			PortNr 		 	:= 16#1000 + NodeID,
			CO_Index 		:= 16#1A00 + RPDO_Nr,
			CO_SubIndex 	:= 0,
			DataLength 		:= 1,
			StartWriting 	:= TRUE,
			WriteData 	 	:= WriteData );
		
		IF SDO_WRITE.WriteDataFinished THEN
			State := State + 1;
		END_IF			

		
	55:	// TPDO reactivate
		WriteData[3] := 0;
		WriteData[2] := 0;			
		WriteData[1] := TPDO_Nr;
		WriteData[0] := NodeID + 16#80;	
			
		SDO_WRITE(
			ADSNetID	:= '5.156.6.243.3.1',
			PortNr 		 := 16#1000 + NodeID,
			CO_Index 	 := 16#1400 + RPDO_Nr,
			CO_SubIndex  := 1,
			DataLength 	 := 4,
			StartWriting := TRUE,
			WriteData 	 := WriteData );
		
		IF SDO_WRITE.WriteDataFinished THEN
			State := State + 1;
		END_IF	
						
	
	56: // NMT Set to operational
		NMT_WRITE(
			ADSNetID	:= '5.156.6.243.3.1',
			PORTNr		:= 16#1000 + NodeID,
			ADSSTATE	:= ADSSTATE_RUN,
			DEVSTATE	:= 1,
			StartWriting:=TRUE );	
		
		IF NMT_WRITE.WriteDataFinished THEN
			State := 255;	
		END_IF

		
	// ********** End **********
	ELSE	// Tests finished	
		Finished := TRUE;
		State := 255;
			
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="FB_DS301_DS402_Object_Testing">
      <LineId Id="131" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="1058" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="1059" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="394" Count="9" />
      <LineId Id="600" Count="0" />
      <LineId Id="404" Count="2" />
      <LineId Id="723" Count="1" />
      <LineId Id="762" Count="2" />
      <LineId Id="761" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="727" Count="6" />
      <LineId Id="735" Count="1" />
      <LineId Id="741" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="748" Count="1" />
      <LineId Id="610" Count="0" />
      <LineId Id="612" Count="6" />
      <LineId Id="1057" Count="0" />
      <LineId Id="621" Count="0" />
      <LineId Id="629" Count="1" />
      <LineId Id="585" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="788" Count="8" />
      <LineId Id="798" Count="1" />
      <LineId Id="801" Count="0" />
      <LineId Id="803" Count="1" />
      <LineId Id="766" Count="0" />
      <LineId Id="768" Count="14" />
      <LineId Id="784" Count="2" />
      <LineId Id="767" Count="0" />
      <LineId Id="787" Count="0" />
      <LineId Id="721" Count="0" />
      <LineId Id="720" Count="0" />
      <LineId Id="653" Count="6" />
      <LineId Id="661" Count="1" />
      <LineId Id="664" Count="0" />
      <LineId Id="666" Count="1" />
      <LineId Id="648" Count="0" />
      <LineId Id="669" Count="8" />
      <LineId Id="679" Count="1" />
      <LineId Id="682" Count="0" />
      <LineId Id="684" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="237" Count="2" />
      <LineId Id="156" Count="1" />
      <LineId Id="315" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="359" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="1060" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="151" Count="2" />
      <LineId Id="219" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="197" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="210" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="180" Count="1" />
      <LineId Id="183" Count="2" />
      <LineId Id="254" Count="0" />
      <LineId Id="186" Count="5" />
      <LineId Id="1063" Count="0" />
      <LineId Id="192" Count="1" />
      <LineId Id="384" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="440" Count="1" />
      <LineId Id="488" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="480" Count="1" />
      <LineId Id="486" Count="0" />
      <LineId Id="456" Count="7" />
      <LineId Id="465" Count="0" />
      <LineId Id="489" Count="1" />
      <LineId Id="492" Count="5" />
      <LineId Id="499" Count="0" />
      <LineId Id="1064" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="503" Count="13" />
      <LineId Id="518" Count="9" />
      <LineId Id="1065" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="501" Count="1" />
      <LineId Id="386" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="989" Count="2" />
      <LineId Id="986" Count="0" />
      <LineId Id="992" Count="0" />
      <LineId Id="987" Count="0" />
      <LineId Id="945" Count="5" />
      <LineId Id="988" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="1055" Count="1" />
      <LineId Id="958" Count="0" />
      <LineId Id="829" Count="0" />
      <LineId Id="993" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="965" Count="3" />
      <LineId Id="979" Count="2" />
      <LineId Id="972" Count="2" />
      <LineId Id="976" Count="2" />
      <LineId Id="830" Count="0" />
      <LineId Id="837" Count="0" />
      <LineId Id="864" Count="0" />
      <LineId Id="922" Count="13" />
      <LineId Id="937" Count="2" />
      <LineId Id="921" Count="0" />
      <LineId Id="940" Count="1" />
      <LineId Id="994" Count="13" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1052" Count="1" />
      <LineId Id="1012" Count="13" />
      <LineId Id="1027" Count="19" />
      <LineId Id="1048" Count="3" />
      <LineId Id="919" Count="0" />
      <LineId Id="806" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="324" Count="3" />
      <LineId Id="332" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="296" Count="1" />
      <LineId Id="282" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>